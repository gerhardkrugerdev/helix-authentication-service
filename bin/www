#!/usr/bin/env node
//
// Copyright 2019 Perforce Software
//

/**
 * Module dependencies.
 */
const app = require('../app')
const debug = require('debug')('auth:server')
const fs = require('fs')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP/S server.
 */
const server = createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on %s', bind)
}

/**
 * Create either an HTTP or HTTPS server based on environment.
 */
function createServer (app) {
  if (process.env.PROTOCOL === 'http') {
    debug('Creating http server')
    return require('http').createServer(app)
  } else {
    if (process.env.SP_KEY_FILE && process.env.SP_CERT_FILE && process.env.CA_CERT_FILE) {
      const options = {
        key: fs.readFileSync(process.env.SP_KEY_FILE),
        cert: fs.readFileSync(process.env.SP_CERT_FILE),
        requestCert: true,
        rejectUnauthorized: false,
        ca: [fs.readFileSync(process.env.CA_CERT_FILE)]
      }
      debug('Creating https server')
      return require('https').createServer(options, app)
    } else {
      console.error('Missing required environment variables: SP_KEY_FILE, SP_CERT_FILE, CA_CERT_FILE')
      process.exit()
    }
  }
}
